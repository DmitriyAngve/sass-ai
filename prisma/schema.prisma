generator client {
  provider = "prisma-client-js"
}

datasource db {
 provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}


// Model for user API limits
model UserApiLimit {
  id String @id @default(cuid()) // аннотация "@id" делает это поле первичным ключом таблицы. "@default(cuid())" - аннотация, означающая что если значение этого поля не указано при создании записи, то будет сгенерирован уникальный идентификатор
  userId String @unique // "@unique" - гарантирует уникальность записи "usedID"
  count Int @default(0) // это поле имеет тип "Int" и аннотацию "@default(0)", что означает, что если для поля не будет указано записи, то оно будет === 0
  createdAt DateTime @default(now()) // это поле будет содержать дату и время создания записи. "@default(now())" - означает, что если оно не будет указано, то создастся время - сейчас
  updatedAt DateTime @updatedAt // аннотация "@updatedAt" указывает на то, что Prisma будет обновлять поле автоматически.
}

model UserSubscription{
  id String @id @default(cuid()) // Collision-resistant unique ID уникальный идентификатор с защитой от коллизий. Обеспечивает уникальность идентификаторов даже при одновременном использовании множеством пользователей и систем. Эти идентификаторы основаны на времени создания, случайных числах и других пар-ах, которые могут помочь избежать коллизий
  userId String @unique
  stripeCustomerId String? @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId String? @unique @map(name: "stripe_subscription_id")
  stripePriceId String? @map(name:"stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name:"stripe_current_preiod_end")
}
// @default(cuid()) - этот декоратор указывает, что если значение не предоставлено явно при создании записи, оно будет генерироваться с помощью функции cuid() 
// String? - не обязательно
// Декоратор @map(name: "stripe_customer_id") определяет, что это поле будет отображено в БД с именем "name: "stripe_customer_id""